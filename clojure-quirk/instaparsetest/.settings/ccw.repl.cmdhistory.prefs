cmdhistory=["(as-and-bs \\"aaaabbbb\\")" "(as-and-bs \\"aaaaabbbaaaabb\\")" "(myParser)" "(myParser 2+3)" "(myParser 1)" "(slurp \\"resources/quirk-grammar-ebnf\\")" "(slurp \\"C\:/Users/'Pol Ajazi'/instaparsetest/resources/quirk-grammar-ebnf\\")" "(slurp \\"C\:/Users/Pol Ajazi/instaparsetest/resources/quirk-grammar-ebnf\\")" "(slurp \\"resources/quirk-grammar-ebnf.txt\\")" "(regulateThis \\"variable\\")" "(regulateThis \\"var\\")" "(regulateThis var)" "(parser \\"1 2 3 4\\")" "(as-and-bs \\"aaaabbababa\\")" "(as-and-bs \\"aaaaabbbaaaabb\\")" "(as-and-bs \\"var\\")" "(as-and-bs \\"aaaaabbbaaaabb\\")" "(as-and-bs \\"var\\")" "(myParser \\"2+3\\")" "(myParser \\"var x \= 12 + 8\\")" "(slurp \\"resources/quirk-grammar-ebnf.txt\\")" "(myParser \\"var x \= 12 + 8\\")" "(parser \\"1 2 3 4\\")" "(myParser \\"print 1 + 4 - 3\\")" "(myParser \\"print 4 + 2\\")" "(parser \\"1 2 3 4 5\\")" "(myParser \\"print 4+2\\")" "(quirk \\"print5+2+3\\")" "(quirk \\"print 5 + 2\\")" "(quirk \\"print5+2\\")" "(quirk \\"print 5 + 2\\")" "(quirk \\"print 4+2\\")" "(println (quirk \\"print 4+2\\"))" "(quirk \\"4+2\\")" "(println (quirk \\"4+2\\"))" "(println (quirk \\"print 4+1\\"))" "(println (quirk \\"print5\\"))" "(println (quirk \\"print 5+1\\"))" "-pt" "(-main -pt)" "(-main -pt \\"print 4+2\\")" "(-main \\"-pt\\" \\"print 4+2\\")" "(-main -pt \\"print 4+2\\")" "(-main -pt)" "(-main \\"pt\\")" "(-main \\"-pt\\")" "(-main -pt)" "(-main \\"-pt\\")" "(my-sum 3 4 5)" "(my-sum 3 4 9 9)" "(symbol [\:Program [\:Statement [\:Print [\:PRINT print] [\:Expression [\:Term [\:Factor [\:Value [\:Number [\:NUMBER 4]]]]] [\:ADD +] [\:Expression [\:Term [\:Factor [\:Value [\:Number [\:NUMBER 2]]]]]]]]]])" "(println parse-tree)" "(println (first subtree))" "(println (first parse-tree))" "(apply (resolve (symbol (name \:Program))))" "(println (resolve (symbol (name \:Program))))" "(resolve (symbol (name \:Program)))" "(0 parse-tree)" "(third parse-tree)" "(0 parse-tree)" "(third parse-tree)" "(second parse-tree)" "(println parse-tree)" "(parsetree)" "(parse-tree)" "(quirk-parser \\"print 4+2\\")" "(println parse-tree)" "(quirk-parser \\"print 4+2\\")" "(println parse-tree)" "(first parse-tree)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser \\"print 4+2\\"))" "(println parse-tree)" "(first parse-tree)" "(symbol (name \:Program))" "(first (third parse-tree))" "(first (second parse-tree))" "(parse-tree)" "(println prase-tree)" "(println parse-tree)" "(pprint parse-tree)" "(ppring parse-tree)" "(pprint parse-tree)" "(first parse-tree)" "(second parse-tree)" "(third parse-tree)" "(stFirst parse-tree)" "(second (first parse-tree))" "(CallByLabel (first parse-tree) parse-tree {})" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser \\"print 5+2\\"))" "(pprint parse-tree)" "(second (first (parse-tree)))" "(pprint parse-tree)" "(contains? parse-tree \:Program)" "(contains? [parse-tree] \:program)" "parse-tree" "(contains? (apply(parse-tree) parse-tree) \:Program)" "'(parse-tree)" "'parse-tree" "prase-tree" "parse-tree" "(contains? [\:Program[\:Statement]] \:Program)" "(contains? parse-tree (first parse-tree))" "(def *strings* parse-tree)" "(def thing parse-tree)(str thing)(contains? thing \:Program)" "(count parse-tree)" "(count first(parse-tree))" "(count (first parse-tree))" "(nth parse-tree 2)" "(nth parse-tree 1)" "(parse-tree)" "parse-tree" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser (slurp \\"resources/example5.q\\")))" "parse-tree" "(count parse-tree)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser \\"print 1\\"))" "(count parse-tree)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser (slurp \\"resources/example2.q\\")))" "(count parse-tree)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n     (def parse-tree (quirk-parser (slurp \\"resources/example3.q\\")))" "(count parse-tree)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n     (def parse-tree (quirk-parser (slurp \\"resources/example2.1\\")))" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n     (def parse-tree (quirk-parser (slurp \\"resources/example1.q\\")))" "parse-tree" "(third parse-tree)" "parse-tree" "(quirk-parser \\"print 1 + 4 - 3\\")" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser (slurp \\"resources/exercise1.q\\")))" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser (slurp \\"resources/example1.q\\")))" "parse-tree" "(< 2 3)" "(def quirk-parser (insta/parser (slurp \\"resources/quirk-grammar-ebnf.txt\\") \:auto-whitespace \:standard))\\r\\n  (def parse-tree (quirk-parser (slurp \\"resources/example1.q\\")))" "parse-tree" "(/ (* 5 2) 5)" "(assoc scope \\"function\\" (vector (vector p1 p2 p3) (vector \\"parsetree\\")))" "(println (def scope {}))\\n(assoc scope \\"function\\" (vector (vector p1 p2 p3) (vector \\"parsetree\\")))" "(def scope {})(assoc scope \\"function\\" (vector (vector p1 p2 p3) (vector \\"parsetree\\")))" "(assoc {} \\"function\\" (vector (vector p1 p2 p3) (vector \\"parsetree\\")))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(Get" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(Get (last scope))" "\\n(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(Get (last \\"function\\"))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(Get scope(last \\"function\\"))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope(last \\"function\\"))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get second(last \\"function\\"))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get (second(last \\"function\\")))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope (second(last \\"function\\")))" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope 2)" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope 1)" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope \\"function\\")" "(def scope {})(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope \\"function\\")" "((assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))(get scope \\"function\\"))" "(assoc {} \\"function\\" (vector (vector 'p1 'p2 'p3) (vector \\"parsetree\\")))" "(get {} \\"function\\")" "(get (assoc {} \\"function\\" (vector (vector 'p1 'p2 'p3) \\"function\\")" "(get (assoc {} \\"function\\" (vector (vector 'p1 'p2 'p3))) \\"function\\")" "(assoc {} \\"function\\" (vector (vector 'p1 'p2 'p3)))(get {} \\"function\\")" "(assoc scope \\"function\\" (vector (vector 'p1 'p2 'p3)))(get scope \\"function\\")" "(defn exp [x n]\\r\\n  (reduce * (repeat n x))) (exp 8 2)" "(defn exp [x n]\\r\\n  (reduce * (repeat n x))) (exp 2 8)" "(println [])" "(ret-print [])" "(\= {} func_parms)" "(\= [] [])" "(def func_prams []) (\= [] func_params)" "(def func_prams []) (\= [] func_prams)" "( 256 [])" "(-1)" "-1" "(defn num -x)(num 1)" "(defn num (* x -1))(num 1)" "(defn num (* x (-1)))(num 1)" "(defn num - x)(num 1)" "(defn num (- x))(num 1)" "(defn num (- 0 x))(num 1)" "(defn num (- 0 (x)))(num 1)" "(defn [x] (- 0 x)) 1" "(defn [x] (- 0 x)) [1]" "(- 0 1)" "-1" "  - 1" "(def x \= 4) ( - x)" "(def (\= x 4)) (- x)" "(*)" "(defn abs [n] (- n)) (abs 1)" "(def subtree ([\:Num [\:SUB -] [\:NUMBER 1]]))(* -1 (Double/parseDouble(second(second subtree))))" "(def subtree [\:Num [\:SUB -] [\:NUMBER 1]])(* -1 (Double/parseDouble(second(second subtree))))" "(* -1 (Double/parseDouble(second(second [\:Num [\:SUB -] [\:NUMBER 1]]))))" "[\:Num [\:SUB -] [\:NUMBER 1]]" "[\:Num [\:SUB \\"-\\"] [\:NUMBER 1]]" "(* -1 (Double/parseDouble(second(second [\:Num [\:SUB \\"-\\"] [\:NUMBER 1]]))))" "(* -1 (Double/parseDouble(third(first [\:Num [\:SUB \\"-\\"] [\:NUMBER 1]]))))" "(defn third [aList] (nth aList 2))(* -1 (Double/parseDouble(third(first [\:Num [\:SUB \\"-\\"] [\:NUMBER 1]]))))" "(second (second [\:Num [\:SUB -] [\:NUMBER 1]]))" "(println (second (second [\:Num [\:SUB -] [\:NUMBER 1]])))" "(second [\:Num [\:SUB -] [\:NUMBER 1]])" "(eval (read-string (str \\"(\\" addsub \\" 0 \\" (nth (nth [\:Num [\:SUB -] [\:NUMBER 1]] 2) 1) \\" )\\") ))" "(read-string (str \\"(\\" addsub \\" 0 \\" (nth (nth [\:Num [\:SUB -] [\:NUMBER 1]] 2) 1) \\" )\\") )" "(nth (nth [\:Num [\:SUB -] [\:NUMBER 1]] 2) 1)" "(* -1 (Double/parseDouble(nth (nth [\:Num [\:SUB -] [\:NUMBER 1]] 2) 1)))" "(* -1 (Double/parseDouble(nth (nth [\:Num [\:SUB -][\:NUMBER 1]] 2) 1)))" "(* -1 (Double/parseDouble(second (first [\:Num [\:SUB -][\:NUMBER 1]]))))" "(second (first [\:Num [\:SUB -][\:NUMBER 1]]))" "(first [\:Num [\:SUB -][\:NUMBER 1]])" "(third [\:Num [\:SUB -][\:NUMBER 1]])" "(second (third [\:Num [\:SUB -][\:NUMBER 1]]))" "(* -1 (Double/parseDouble(second (third [\:Num [\:SUB -][\:NUMBER 1]]))))" "(- (+ 4 2) 3)" "(\= [\:SUB -] \:SUB)" "(contains? [\:SUB -] \:SUB)" "(first [\:SUB -])" "(- 1 (-1))" "(- 1 (- 1))" "(- (- 1) 1)" "(first (second [\:NameList [\:Name [\:IDENT \\"b\\"]]]))" "(first (second[\:NameList [\:Name [\:IDENT \\"b\\"]]]))" "(count [\:NameList [\:Name [\:IDENT \\"b\\"]]])" "(conj a b)" "(conj [a] b)" "(conj ['a] b)" "(conj ['a] 'b)" "{a}" "(first (second [\:NameList [\:Name [\:IDENT \\"b\\"]]]))" "(- a)" "(- 'a)" "'(- a)" "(first(second [\:Name [\:ADD +] [\:IDENT b]]))" "(second [\:Name [\:ADD +] [\:IDENT b]])" "(first [\:Name [\:ADD +][\:IDENT b]])" "(second [\:Name [\:ADD +][\:IDENT b]])" "(first [\:Name [\:ADD +][\:IDENT b]])" "(second [0 [1] [2]])" "(first(second[\:Name [\:ADD \\"+\\"][\:IDENT \\"b\\"]]))" "(- '(a))" "'(-a)"]
eclipse.preferences.version=1
